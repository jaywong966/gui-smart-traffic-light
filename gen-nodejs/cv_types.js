//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var LocationInfo = module.exports.LocationInfo = function(args) {
  this.encoded_images = null;
  this.n_pedestrians = null;
  this.n_vehicles = null;
  this.traffic_signals = null;
  this.count_down = null;
  if (args) {
    if (args.encoded_images !== undefined && args.encoded_images !== null) {
      this.encoded_images = Thrift.copyMap(args.encoded_images, [null]);
    }
    if (args.n_pedestrians !== undefined && args.n_pedestrians !== null) {
      this.n_pedestrians = args.n_pedestrians;
    }
    if (args.n_vehicles !== undefined && args.n_vehicles !== null) {
      this.n_vehicles = args.n_vehicles;
    }
    if (args.traffic_signals !== undefined && args.traffic_signals !== null) {
      this.traffic_signals = args.traffic_signals;
    }
    if (args.count_down !== undefined && args.count_down !== null) {
      this.count_down = args.count_down;
    }
  }
};
LocationInfo.prototype = {};
LocationInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.encoded_images = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = input.readString();
          this.encoded_images[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.n_pedestrians = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.n_vehicles = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.traffic_signals = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.count_down = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationInfo.prototype.write = function(output) {
  output.writeStructBegin('LocationInfo');
  if (this.encoded_images !== null && this.encoded_images !== undefined) {
    output.writeFieldBegin('encoded_images', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.encoded_images));
    for (var kiter5 in this.encoded_images) {
      if (this.encoded_images.hasOwnProperty(kiter5)) {
        var viter6 = this.encoded_images[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.n_pedestrians !== null && this.n_pedestrians !== undefined) {
    output.writeFieldBegin('n_pedestrians', Thrift.Type.I32, 2);
    output.writeI32(this.n_pedestrians);
    output.writeFieldEnd();
  }
  if (this.n_vehicles !== null && this.n_vehicles !== undefined) {
    output.writeFieldBegin('n_vehicles', Thrift.Type.I32, 3);
    output.writeI32(this.n_vehicles);
    output.writeFieldEnd();
  }
  if (this.traffic_signals !== null && this.traffic_signals !== undefined) {
    output.writeFieldBegin('traffic_signals', Thrift.Type.STRING, 4);
    output.writeString(this.traffic_signals);
    output.writeFieldEnd();
  }
  if (this.count_down !== null && this.count_down !== undefined) {
    output.writeFieldBegin('count_down', Thrift.Type.I32, 5);
    output.writeI32(this.count_down);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapShots = module.exports.SnapShots = function(args) {
  this.location = null;
  this.encoded_images = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.encoded_images !== undefined && args.encoded_images !== null) {
      this.encoded_images = Thrift.copyMap(args.encoded_images, [null]);
    }
  }
};
SnapShots.prototype = {};
SnapShots.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.encoded_images = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var key10 = null;
          var val11 = null;
          key10 = input.readString();
          val11 = input.readString();
          this.encoded_images[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapShots.prototype.write = function(output) {
  output.writeStructBegin('SnapShots');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 1);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.encoded_images !== null && this.encoded_images !== undefined) {
    output.writeFieldBegin('encoded_images', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.encoded_images));
    for (var kiter12 in this.encoded_images) {
      if (this.encoded_images.hasOwnProperty(kiter12)) {
        var viter13 = this.encoded_images[kiter12];
        output.writeString(kiter12);
        output.writeString(viter13);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

