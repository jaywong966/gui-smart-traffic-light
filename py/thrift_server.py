
from threading import Thread
import os
import json
import cv2
import base64
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

# auto generated by thrift
from gen_py.cv import cvService
from gen_py.cv.ttypes import SnapShots, LocationInfo


class CVServer:
    def __init__(self):
        current_path = os.path.dirname(os.path.abspath( __file__ ))
        parent_path = os.path.dirname(current_path)
        dummy_images = []
        n_total_images = 14 #dummy
        for i in range(n_total_images):
            relative_path = 'img/traffic'+str(i+1)+'.jpg'
            img = cv2.imread(os.path.join(parent_path, relative_path))
            b64_encoded_image = self.encode_image(img)
            dummy_images.append(b64_encoded_image)
        
        #dummy data
        self.location_info = []
        self.n_pedestrians = 5
        self.n_vehicles = 5
        self.countdown = 5
        self.light_signal = ["Red", "Red", "Red", "Red", "Red"]
        self.locations = ['Location-A', 'Location-B', 'Location-C']
        self.location_views = {
            'Location-A': {
                'Camera1': dummy_images[0],
                'Camera2': dummy_images[1],
                'Camera3': dummy_images[2],
                'Camera4': dummy_images[3],
                'Camera5': dummy_images[4],
            },
            'Location-B': {
                'Camera1': dummy_images[4],
                'Camera2': dummy_images[5],
                'Camera3': dummy_images[6],
                'Camera4': dummy_images[7],
            },
            'Location-C': {
                'Camera1': dummy_images[8],
                'Camera2': dummy_images[9],
                'Camera3': dummy_images[10],
                'Camera4': dummy_images[11],
            },
        }


    def encode_image(self, img):
        _, encoded_img = cv2.imencode('.jpg', img)
        return base64.b64encode(encoded_img).decode()

    def get_location_list(self): #service1
        return self.locations

    def get_snapshots(self, location): #service2
        response = SnapShots()
        response.location = location
        response.encoded_images = self.location_views[location]
        return response

    def get_location_info(self, location): #service3
        response = LocationInfo()
        response.encoded_images = self.location_views[location]  # dummy
        response.n_pedestrians = self.n_pedestrians  # dummy
        response.n_vehicles = self.n_vehicles  # dummy
        response.traffic_signals = self.light_signal  # dummy
        response.count_down = self.countdown  # dummy
        return response

    def updata_imgs(self, imgs):
        detected_imgs = []
        for img in imgs:
            b64_encoded_image = self.encode_image(img)
            detected_imgs.append(b64_encoded_image)
        self.location_views['Location-A']['Camera1'] = detected_imgs[0]
        self.location_views['Location-A']['Camera2'] = detected_imgs[1]
        self.location_views['Location-A']['Camera3'] = detected_imgs[2]
        self.location_views['Location-A']['Camera4'] = detected_imgs[3]
        self.location_views['Location-A']['Camera5'] = detected_imgs[4]

    def update_location_info(self, location_info):
        self.n_vehicles,self.n_pedestrians = 0,0
        for i in range(4):
            self.n_vehicles+=location_info[i]
        self.n_pedestrians = location_info[4]

    def update_light_signal(self, light_signal, countdown):
        self.light_signal = light_signal
        self.countdown = countdown

    
class ThriftServer:
    def __init__(self):
        self.port = 9999
        self.ip = "127.0.0.1"
        self.handler = CVServer()
        
    def launch(self):
        processor = cvService.Processor(self.handler)
        transport = TSocket.TServerSocket(self.ip, self.port)
        tfactory = TTransport.TBufferedTransportFactory()
        pfactory = TBinaryProtocol.TBinaryProtocolFactory()
        server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
        server.serve()
        
    def start(self):
        thread = Thread(target = self.launch, daemon=True)
        print("Start cv server in python", flush=True)
        thread.start()
        #thread.join()
        print("Done", flush=True)

        
        # print("Start cv server in python", flush=True)
        # self.server.serve()
        # print("Done", flush=True)
        
        
    def update_imgs(self, imgs):
        self.handler.updata_imgs(imgs)

    def update_location_info(self, location_info):
        self.handler.update_location_info(location_info)

    def update_light_signal(self, light_signal, countdown):
        self.handler.update_light_signal(light_signal, countdown)
        
    

        
# def main() :
#     port = 9999
#     ip = "127.0.0.1"
#     handler = CVServer()
#     processor = cvService.Processor(handler)
#     transport = TSocket.TServerSocket(ip, port)
#     tfactory = TTransport.TBufferedTransportFactory()
#     pfactory = TBinaryProtocol.TBinaryProtocolFactory()
#     server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
#     print("Start cv server in python", flush=True)
#     server.serve()
#     print("Done", flush=True)